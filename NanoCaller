#!/usr/bin/env python

from warnings import simplefilter 
simplefilter(action='ignore', category=FutureWarning)

import time, argparse, os, shutil, sys, pysam, datetime
import multiprocessing as mp
from intervaltree import Interval, IntervalTree
from subprocess import PIPE, Popen
from nanocaller_src.utils import *

def run(args):
    from nanocaller_src import snpCaller, indelCaller
        
    threshold=[float(args.neighbor_threshold.split(',')[0]), float(args.neighbor_threshold.split(',')[1])]
    
    dirname = os.path.dirname(__file__)
    
    regions_list=get_regions_list(args)

    if args.exclude_bed in ['hg38', 'hg19', 'mm10', 'mm39']:
        args.exclude_bed=os.path.join(dirname, 'nanocaller_src/release_data/bed_files/%s_centro_telo.bed.gz' %args.exclude_bed)    
        
    snp_vcf=None
    if args.mode in ['snps', 'all']:
        snp_time=time.time()
        chunks_list=get_chunks(regions_list, args.cpu)
        in_dict={'chunks_list': chunks_list, 'regions_list': regions_list, 'sam_path':args.bam, 'fasta_path':args.ref, \
             'mincov':args.mincov,  'maxcov':args.maxcov, 'min_allele_freq':args.min_allele_freq, 'min_nbr_sites':args.min_nbr_sites, \
             'threshold':threshold, 'snp_model':args.snp_model, 'cpu':args.cpu,  \
                 'vcf_path':args.output, 'prefix':args.prefix, 'sample':args.sample, \
                 'seq':args.sequencing, 'supplementary':args.supplementary, \
                 'exclude_bed':args.exclude_bed, 'suppress_progress':args.suppress_progress_bar, 
                 'phase_qual_score':args.phase_qual_score, 'verbose':args.verbose}
        
        snp_vcf=snpCaller.call_manager(in_dict)
        print('\n%s: SNP calling completed. Time taken= %.4f\n' %(str(datetime.datetime.now()), time.time()-snp_time),flush=True)

        
    if args.mode in ['indels', 'all'] or args.phase:
        indel_phase_time=time.time()
        chunks_list=get_chunks(regions_list, args.cpu, max_chunk_size=100000)
        
        in_dict={'chunks_list': chunks_list,'mode':args.mode, 'snp_vcf':snp_vcf, 'regions_list': regions_list,\
                 'sam_path':args.bam, 'fasta_path':args.ref, 'mincov':args.mincov,\
                 'maxcov':args.maxcov, 'indel_model':args.indel_model, 'cpu':args.cpu,\
                 'vcf_path':args.output, 'prefix':args.prefix, 'sample':args.sample,\
                 'seq':args.sequencing, 'del_t':args.del_threshold, 'ins_t':args.ins_threshold,\
                 'impute_indel_phase':args.impute_indel_phase, 'supplementary':args.supplementary,\
                 'exclude_bed':args.exclude_bed, 'win_size':args.win_size, 'small_win_size':args.small_win_size,
                 'enable_whatshap':args.enable_whatshap, 'suppress_progress':args.suppress_progress_bar,
                 'phase_qual_score':args.phase_qual_score, 'verbose':args.verbose}
        
        files=indelCaller.call_manager(in_dict)
        print('\n%s: %s completed. Time taken= %.4f\n' %(str(datetime.datetime.now()), 'Phasing' if args.mode=='snps' else 'Indel calling', time.time()-indel_phase_time),flush=True)

            
            
if __name__ == '__main__':
    
    
    t=time.time()
    
    
    preset_dict={'ont':{'sequencing':'ont', 'snp_model':'ONT-HG002', 'indel_model':'ONT-HG002', 'neighbor_threshold':'0.4,0.6', 'ins_threshold':0.4,'del_threshold':0.6, 'enable_whatshap':False, 'impute_indel_phase':False},
                 
                 'short_ont':{'sequencing':'short_ont', 'snp_model':'ONT-HG002', 'indel_model':'ONT-HG002', 'neighbor_threshold':'0.3,0.7', 'ins_threshold':0.4,'del_threshold':0.6, 'enable_whatshap':False, 'impute_indel_phase':False},
                 
                'ul_ont': {'sequencing':'ul_ont', 'snp_model':'ONT-HG002', 'indel_model':'ONT-HG002', 'neighbor_threshold':'0.4,0.6', 'ins_threshold':0.4,'del_threshold':0.6, 'enable_whatshap':False, 'impute_indel_phase':False},
                 
                'ul_ont_extreme':{'sequencing':'ul_ont_extreme', 'snp_model':'ONT-HG002', 'indel_model':'ONT-HG002', 'neighbor_threshold':'0.4,0.6', 'ins_threshold':0.4,'del_threshold':0.6, 'enable_whatshap':False, 'impute_indel_phase':False},
                 
                'ccs':{'sequencing':'pacbio', 'snp_model': 'CCS-HG002', 'indel_model':'CCS-HG002', 'neighbor_threshold':'0.3,0.7', 'ins_threshold':0.4,'del_threshold':0.4, 'enable_whatshap':True, 'impute_indel_phase':True},
                 
                'clr':{'sequencing':'pacbio', 'snp_model':'CLR-HG002', 'indel_model':'ONT-HG002', 'neighbor_threshold':'0.3,0.6', 'ins_threshold':0.6,'del_threshold':0.6, 'win_size':10, 'small_win_size':2, 'enable_whatshap':True, 'impute_indel_phase':False}
                }
    
    flag_dict={"seq":"sequencing", "p":"preset", "o":"output", "sup":"supplementary","nbr_t":"neighbor_threshold","ins_t":"ins_threshold", "del_t":"del_threshold"}
    flag_map=lambda x: flag_dict[x] if x in flag_dict else x
    
    
    
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    
    requiredNamed = parser.add_argument_group('Required Arguments')
    preset_group=parser.add_argument_group("Preset")
    config_group = parser.add_argument_group('Configurations')
    region_group=parser.add_argument_group(title="Variant Calling Regions", description="Use only one of these options to specify regions for variant calling: --regions or --bed option or --wgs_contigs. If none is provided then whole genome variant calling is assumed and all contigs in the BAM file are used.")
    
    snp_group=parser.add_argument_group("SNP Calling")
    indel_group=parser.add_argument_group("Indel Calling")
    out_group=parser.add_argument_group("Output Options")
    phase_group=parser.add_argument_group("Phasing")
    
    config_group.add_argument("--mode",  help="NanoCaller mode to run. 'snps' mode quits NanoCaller without using WhatsHap for phasing. In this mode, if you want NanoCaller to phase SNPs and BAM files, use --phase argument additionally.", type=str, default='all', choices=['snps', 'indels', 'all'])
    config_group.add_argument("--sequencing",  help="Sequencing type.  'ont' works well for any type of ONT sequencing datasets. However, use 'ul_ont' if you have several ultra-long ONT reads up to 100kbp long, and 'ul_ont_extreme' if you have several ultra-long ONT reads up to 300kbp long. If you have short ONT reads, typically within 2-10kbp, use 'short_ont'. For PacBio CCS (HiFi) and CLR reads, use 'pacbio'.", type=str, default='ont', choices=['short_ont','ont', 'ul_ont', 'ul_ont_extreme', 'pacbio'])

    config_group.add_argument("--cpu",  help="Number of CPUs to use.", type=int, default=1)
    
    config_group.add_argument("--mincov",  help="Minimum coverage to call a variant", type=int, default=4)
    config_group.add_argument("--maxcov",  help="Maximum coverage of reads to use. If sequencing depth at a candidate site exceeds maxcov then reads are downsampled.", type=int, default=160)
    config_group.add_argument("--suppress_progress_bar", help="Do not show progress bar.", default=False, action='store_true')
    config_group.add_argument("--haploid_genome", help="Assume that all chromosomes in the genome are haploid.", default=False, action='store_true')
    
    config_group.add_argument("--verbose", help="Show all stdout and stderr messages", default=False, action='store_true')
    
    config_group.add_argument("--haploid_X", help="Assume that chrX is haploid. chrY and chrM are assumed to be haploid by default.", default=False, action='store_true')
    
    #output options
    out_group.add_argument("--output",  help="VCF output path, default is current working directory", type=str)    
    out_group.add_argument("--prefix",  help="VCF file prefix", type=str, default='variant_calls')
    out_group.add_argument("--sample",  help="VCF file sample name", type=str, default='SAMPLE')
    

    #region
    region_group.add_argument(  "--regions", nargs='*',  help='A space/whitespace separated list of regions specified as "CONTIG_NAME" or "CONTIG_NAME:START-END". If you want to use "CONTIG_NAME:START-END" format then specify both start and end coordinates. For example: chr3 chr6:28000000-35000000 chr22.')
    
    region_group.add_argument("--bed",  help="A BED file specifying regions for variant calling.", type=str, default=None)
   
    region_group.add_argument('--wgs_contigs', help="""Preset list of chromosomes to use for variant calling on human genomes. "chr1-22XY" option will assume human reference genome with "chr" prefix present in the chromosome notation, and run NanoCaller on chr1 to chr22, chrX and chrY. "1-22XY" option will assume no "chr" prefix is present in the chromosome notation and run NanoCaller on chromosomes 1-22, X and Y.""", type=str, default=None, choices=["chr1-22XY", "1-22XY"])
    
    region_group.add_argument("--exclude_bed",  help="Path to bgzipped and tabix indexed BED file containing intervals to ignore  for variant calling. BED files of centromere and telomere regions for the following genomes are included in NanoCaller: hg38, hg19, mm10 and mm39.", type=str, default=None, choices=['hg38', 'hg19', 'mm10', 'mm39'])
    
    #preset
    preset_group.add_argument("--preset",  help="Apply recommended preset values for SNP and Indel calling parameters. 'ont' works well for all types of ONT sequencing datasets. However, use 'ul_ont' if you have several ultra-long ONT reads up to 100kbp long, and 'ul_ont_extreme' if you have several ultra-long ONT reads up to 300kbp long. For PacBio CCS (HiFi) and CLR reads, use 'ccs'and 'clr' respectively. Presets are described in detail here: github.com/WGLab/NanoCaller/blob/master/docs/Usage.md#preset-options.", type=str, choices=[ 'ont', 'ul_ont', 'ul_ont_extreme', 'ccs', 'clr'])
    
    #required
    requiredNamed.add_argument("--bam",  help="Bam file, should be phased if 'indel' mode is selected", required=True)
    requiredNamed.add_argument("--ref",  help="Reference genome file with .fai index", required=True)
    
    #snp
    snp_group.add_argument("--snp_model",  help="NanoCaller SNP model to be used", default='ONT-HG002')
    snp_group.add_argument("--min_allele_freq",  help="minimum alternative allele frequency", type=float,  default=0.15)
    snp_group.add_argument("--min_nbr_sites",  help="minimum number of nbr sites", type=int,  default =1)
    snp_group.add_argument("--neighbor_threshold",  help="SNP neighboring site thresholds with lower and upper bounds seperated by comma, for Nanopore reads '0.4,0.6' is recommended, for PacBio CCS anc CLR reads '0.3,0.7' and '0.3,0.6' are recommended respectively", type=str, default='0.4,0.6')
    snp_group.add_argument("--supplementary",  help="Use supplementary reads, not fully supported at the moment", default=False, action='store_true')
    
    
    #indel
    indel_group.add_argument("--indel_model",  help="NanoCaller indel model to be used", default='ONT-HG002')
    indel_group.add_argument("--ins_threshold", help="Insertion Threshold",type=float,default=0.4)
    indel_group.add_argument("--del_threshold", help="Deletion Threshold",type=float,default=0.6)
    indel_group.add_argument("--win_size",  help="Size of the sliding window in which the number of indels is counted to determine indel candidate site. Only indels longer than 2bp are counted in this window. Larger window size can increase recall, but use a maximum of 50 only", type=int, default=40)
    indel_group.add_argument("--small_win_size",  help="Size of the sliding window in which indel frequency is determined for small indels", type=int, default=4)
    
    indel_group.add_argument('--impute_indel_phase', help='Infer read phase by rudimentary allele clustering if the no or insufficient phasing information is available, can be useful for datasets without SNPs or regions with poor phasing quality', default=False, action='store_true')
    
    
    #phasing
    phase_group.add_argument('--phase', help='Phase SNPs and BAM files if snps mode is selected.', default=False, action='store_true')
    phase_group.add_argument('--phase_qual_score', help='SNP QUAL score cutoff for phasing via Whatshap. SNPS with QUAL score lower than this will not be used for infering haplotype and will also not be phased.', type=float, default=10)
    
    phase_group.add_argument("--enable_whatshap",  help="Allow WhatsHap to change SNP genotypes when phasing using --distrust-genotypes and --include-homozygous flags (this is not the same as regenotyping), increasing the time needed for phasing. It has a negligible effect on SNP calling accuracy for Nanopore reads, but may make a small improvement for PacBio reads or low coverage ONT samples. By default WhatsHap will only phase SNP calls produced by NanoCaller, but not change their genotypes.",  default=False, action='store_true')
    
    args = parser.parse_args()
    
    args.supplementary=False
    
    set_flags=[]
    
    for x in sys.argv:
        if '--' in x:
            set_flags.append(x.replace('-',''))
            
    if args.preset:
        for p in preset_dict[args.preset]:
            if p not in set_flags:
                vars(args)[p]=preset_dict[args.preset][p]    
    
    if not args.output:
        args.output=os.getcwd()
    
    os.makedirs(args.output, exist_ok=True)  
    
    
    with open(os.path.join(args.output,'args'),'w') as file:
        file.write('Command: python %s\n\n\n' %(' '.join(sys.argv)))
        file.write('------Parameters Used For Variant Calling------\n')
        for k in vars(args):
            file.write('{}: {}\n'.format(k,vars(args)[k]) )
        
    print('\n%s: Starting NanoCaller.\n\nNanoCaller command and arguments are saved in the following file: %s\n' %(str(datetime.datetime.now()), os.path.join(args.output,'args')), flush=True)
    
    
    if args.regions and args.bed:
        print('\n%s: Please use either --regions or --bed but not both.'  %str(datetime.datetime.now(), flush=True))
        sys.exit(2)
    
    run(args)
    
    elapsed=time.time()-t

    print ('\n%s: Total Time Elapsed: %.2f seconds' %(str(datetime.datetime.now()), elapsed))
